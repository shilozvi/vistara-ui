{"ast":null,"code":"var _jsxFileName = \"/Users/zvishilovitsky/vistara-ui/src/utils/normalizeStyle.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * 🔧 Style Normalization Utility\n * Ensures all components use CSS Variables instead of hardcoded values\n */\n\n// Mapping of hardcoded values to CSS Variables\nconst STYLE_MAPPINGS = {\n  // Colors\n  '#6c5ce7': 'var(--color-primary)',\n  '#a29bfe': 'var(--color-primary-light)',\n  '#5f3dc4': 'var(--color-primary-dark)',\n  '#0984e3': 'var(--color-secondary)',\n  '#74b9ff': 'var(--color-secondary-light)',\n  '#ffffff': 'var(--color-white)',\n  '#000000': 'var(--color-black)',\n  // Spacing\n  '4px': 'var(--space-1)',\n  '8px': 'var(--space-2)',\n  '12px': 'var(--space-3)',\n  '16px': 'var(--space-4)',\n  '20px': 'var(--space-5)',\n  '24px': 'var(--space-6)',\n  '32px': 'var(--space-8)',\n  '48px': 'var(--space-12)',\n  // Border Radius\n  '0.25rem': 'var(--border-radius-sm)',\n  '0.5rem': 'var(--border-radius-md)',\n  '0.75rem': 'var(--border-radius-lg)',\n  '1rem': 'var(--border-radius-xl)',\n  // Font Sizes\n  '12px': 'var(--font-size-xs)',\n  '14px': 'var(--font-size-sm)',\n  '16px': 'var(--font-size-base)',\n  '18px': 'var(--font-size-lg)',\n  '20px': 'var(--font-size-xl)',\n  '24px': 'var(--font-size-2xl)',\n  '30px': 'var(--font-size-3xl)',\n  '36px': 'var(--font-size-4xl)'\n};\n\n/**\n * Normalizes style object to use CSS Variables\n * @param {Object} styles - Style object to normalize\n * @returns {Object} - Normalized style object\n */\nexport const normalizeStyle = styles => {\n  if (!styles || typeof styles !== 'object') return styles;\n  const normalized = {};\n  for (const [property, value] of Object.entries(styles)) {\n    if (typeof value === 'string' && STYLE_MAPPINGS[value]) {\n      normalized[property] = STYLE_MAPPINGS[value];\n    } else {\n      normalized[property] = value;\n    }\n  }\n  return normalized;\n};\n\n/**\n * Validates component props for hardcoded values\n * @param {Object} props - Component props\n * @param {string} componentName - Name of component for logging\n */\nexport const validateProps = (props, componentName = 'Unknown') => {\n  if (process.env.NODE_ENV === 'development') {\n    const hardcodedValues = [];\n    const checkValue = (key, value) => {\n      if (typeof value === 'string') {\n        // Check for hex colors\n        if (/^#[0-9A-F]{6}$/i.test(value)) {\n          hardcodedValues.push(`${key}: ${value} (use CSS variable instead)`);\n        }\n        // Check for pixel values\n        if (/^\\d+px$/.test(value)) {\n          hardcodedValues.push(`${key}: ${value} (use CSS variable instead)`);\n        }\n      }\n    };\n    const scanObject = (obj, prefix = '') => {\n      for (const [key, value] of Object.entries(obj)) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        if (typeof value === 'object' && value !== null) {\n          scanObject(value, fullKey);\n        } else {\n          checkValue(fullKey, value);\n        }\n      }\n    };\n    scanObject(props);\n    if (hardcodedValues.length > 0) {\n      console.warn(`⚠️ [${componentName}] Hardcoded values detected:`, hardcodedValues);\n    }\n  }\n};\n\n/**\n * HOC to automatically normalize styles\n * @param {React.Component} Component - Component to wrap\n * @returns {React.Component} - Wrapped component\n */\nexport const withNormalizedStyles = Component => {\n  return function NormalizedComponent(props) {\n    if (process.env.NODE_ENV === 'development') {\n      validateProps(props, Component.name || Component.displayName);\n    }\n    const normalizedProps = {\n      ...props,\n      style: normalizeStyle(props.style)\n    };\n    return /*#__PURE__*/_jsxDEV(Component, {\n      ...normalizedProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this);\n  };\n};\nexport default normalizeStyle;","map":{"version":3,"names":["STYLE_MAPPINGS","normalizeStyle","styles","normalized","property","value","Object","entries","validateProps","props","componentName","process","env","NODE_ENV","hardcodedValues","checkValue","key","test","push","scanObject","obj","prefix","fullKey","length","console","warn","withNormalizedStyles","Component","NormalizedComponent","name","displayName","normalizedProps","style","_jsxDEV","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/zvishilovitsky/vistara-ui/src/utils/normalizeStyle.js"],"sourcesContent":["/**\n * 🔧 Style Normalization Utility\n * Ensures all components use CSS Variables instead of hardcoded values\n */\n\n// Mapping of hardcoded values to CSS Variables\nconst STYLE_MAPPINGS = {\n  // Colors\n  '#6c5ce7': 'var(--color-primary)',\n  '#a29bfe': 'var(--color-primary-light)',\n  '#5f3dc4': 'var(--color-primary-dark)',\n  '#0984e3': 'var(--color-secondary)',\n  '#74b9ff': 'var(--color-secondary-light)',\n  '#ffffff': 'var(--color-white)',\n  '#000000': 'var(--color-black)',\n  \n  // Spacing\n  '4px': 'var(--space-1)',\n  '8px': 'var(--space-2)',\n  '12px': 'var(--space-3)',\n  '16px': 'var(--space-4)',\n  '20px': 'var(--space-5)',\n  '24px': 'var(--space-6)',\n  '32px': 'var(--space-8)',\n  '48px': 'var(--space-12)',\n  \n  // Border Radius\n  '0.25rem': 'var(--border-radius-sm)',\n  '0.5rem': 'var(--border-radius-md)',\n  '0.75rem': 'var(--border-radius-lg)',\n  '1rem': 'var(--border-radius-xl)',\n  \n  // Font Sizes\n  '12px': 'var(--font-size-xs)',\n  '14px': 'var(--font-size-sm)',\n  '16px': 'var(--font-size-base)',\n  '18px': 'var(--font-size-lg)',\n  '20px': 'var(--font-size-xl)',\n  '24px': 'var(--font-size-2xl)',\n  '30px': 'var(--font-size-3xl)',\n  '36px': 'var(--font-size-4xl)'\n};\n\n/**\n * Normalizes style object to use CSS Variables\n * @param {Object} styles - Style object to normalize\n * @returns {Object} - Normalized style object\n */\nexport const normalizeStyle = (styles) => {\n  if (!styles || typeof styles !== 'object') return styles;\n  \n  const normalized = {};\n  \n  for (const [property, value] of Object.entries(styles)) {\n    if (typeof value === 'string' && STYLE_MAPPINGS[value]) {\n      normalized[property] = STYLE_MAPPINGS[value];\n    } else {\n      normalized[property] = value;\n    }\n  }\n  \n  return normalized;\n};\n\n/**\n * Validates component props for hardcoded values\n * @param {Object} props - Component props\n * @param {string} componentName - Name of component for logging\n */\nexport const validateProps = (props, componentName = 'Unknown') => {\n  if (process.env.NODE_ENV === 'development') {\n    const hardcodedValues = [];\n    \n    const checkValue = (key, value) => {\n      if (typeof value === 'string') {\n        // Check for hex colors\n        if (/^#[0-9A-F]{6}$/i.test(value)) {\n          hardcodedValues.push(`${key}: ${value} (use CSS variable instead)`);\n        }\n        // Check for pixel values\n        if (/^\\d+px$/.test(value)) {\n          hardcodedValues.push(`${key}: ${value} (use CSS variable instead)`);\n        }\n      }\n    };\n    \n    const scanObject = (obj, prefix = '') => {\n      for (const [key, value] of Object.entries(obj)) {\n        const fullKey = prefix ? `${prefix}.${key}` : key;\n        \n        if (typeof value === 'object' && value !== null) {\n          scanObject(value, fullKey);\n        } else {\n          checkValue(fullKey, value);\n        }\n      }\n    };\n    \n    scanObject(props);\n    \n    if (hardcodedValues.length > 0) {\n      console.warn(`⚠️ [${componentName}] Hardcoded values detected:`, hardcodedValues);\n    }\n  }\n};\n\n/**\n * HOC to automatically normalize styles\n * @param {React.Component} Component - Component to wrap\n * @returns {React.Component} - Wrapped component\n */\nexport const withNormalizedStyles = (Component) => {\n  return function NormalizedComponent(props) {\n    if (process.env.NODE_ENV === 'development') {\n      validateProps(props, Component.name || Component.displayName);\n    }\n    \n    const normalizedProps = {\n      ...props,\n      style: normalizeStyle(props.style)\n    };\n    \n    return <Component {...normalizedProps} />;\n  };\n};\n\nexport default normalizeStyle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}